import os
import pandas as pd
import pymc3 as pm
import numpy as np
import theano.tensor as tt
from theano.ifelse import ifelse
from mb_modelbase.models_core.pyMC3_model import ProbabilisticPymc3Model
def create_fun():
   def code_to_fit(file='../data/titanic_mixed2_cleaned.csv', modelname='titanic_4', fit=True, dtm=None, pp_graph=None):
            # income is gaussian, depends on age
            filepath = os.path.join(os.path.dirname(__file__), '../data/titanic_mixed2_cleaned.csv')
            df_model_repr = pd.read_csv(filepath)
            df_orig = dtm.backward(df_model_repr, inplace=False)
            if fit:
                modelname = modelname + '_fitted'
            # Set up shared variables

            model = pm.Model()
            data = None
            with model:
                ticket = pm.Categorical('ticket', p
                embarked = pm.Categorical('embarked', p=[0.32665,0.32665,0.32665])
                pclass = pm.Categorical('pclass', p=tt.switch(tt.eq(embarked, 0), [0.26420999999999994,0.26420999999999994,0.26420999999999994], tt.switch(tt.eq(embarked, 1), [0.26420999999999994,0.26420999999999994,0.26420999999999994], [0.26420999999999994,0.26420999999999994,0.26420999999999994])))
                survived = pm.Categorical('survived', p=tt.switch(tt.eq(pclass, 0), [0.5000000000000001,0.5000000000000001], tt.switch(tt.eq(pclass, 1), [0.5000000000000001,0.5000000000000001], [0.5000000000000001,0.5000000000000001])))
                sex = pm.Categorical('sex', p=tt.switch(tt.eq(survived, 0), [0.5000000000000001,0.5000000000000001], [0.5000000000000001,0.5000000000000001]))
                age = pm.Normal('age', mu=tt.switch(tt.eq(embarked, 0), tt.switch(tt.eq(pclass, 0), 36.3462, tt.switch(tt.eq(pclass, 1), 20.5921, 20.5546)), tt.switch(tt.eq(embarked, 1), tt.switch(tt.eq(pclass, 0), 35.0, tt.switch(tt.eq(pclass, 1), 29.9406, 27.8244)), tt.switch(tt.eq(pclass, 0), 35.7486, tt.switch(tt.eq(pclass, 1), 25.458, 23.4376)))), sigma=tt.switch(tt.eq(embarked, 0), tt.switch(tt.eq(pclass, 0), 12.6923, tt.switch(tt.eq(pclass, 1), 10.5268, 11.7445)), tt.switch(tt.eq(embarked, 1), tt.switch(tt.eq(pclass, 0), 2.8284, tt.switch(tt.eq(pclass, 1), 0.0841, 4.2584)), tt.switch(tt.eq(pclass, 0), 14.5895, tt.switch(tt.eq(pclass, 1), 14.4234, 11.2448)))))
                fare = pm.Normal('fare', mu=tt.switch(tt.eq(embarked, 0), tt.switch(tt.eq(survived, 0), age*6.8364+-20.385763636363638, age*1.5673+-20.385763636363638), tt.switch(tt.eq(embarked, 1), tt.switch(tt.eq(survived, 0), age*0.0+-20.385763636363638, age*1.7592+-20.385763636363638), tt.switch(tt.eq(survived, 0), age*1.0575+-20.385763636363638, age*0.5523+-20.385763636363638))), sigma=tt.switch(tt.eq(embarked, 0), tt.switch(tt.eq(survived, 0), 29.41479090909092, 29.41479090909092), tt.switch(tt.eq(embarked, 1), tt.switch(tt.eq(survived, 0), 29.41479090909092, 29.41479090909092), tt.switch(tt.eq(survived, 0), 29.41479090909092, 29.41479090909092))))
                
            m = ProbabilisticPymc3Model(modelname, model, data_mapping=dtm, probabilistic_program_graph=pp_graph)
            m.nr_of_posterior_samples = 1000
            if fit:
                m.fit(df_orig, auto_extend=False)
            return df_orig, m
   return code_to_fit